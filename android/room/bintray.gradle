apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def propertyWithDefault(name, defVal) {
    return rootProject.hasProperty(name) ? rootProject.getProperty(name) : defVal;
}

bintray {
    publications = ['wcdbRoomLibrary']

    user = propertyWithDefault('BINTRAY_USER', '')
    key = propertyWithDefault('BINTRAY_APIKEY', '')
    pkg {
        repo = 'wcdb'
        name = 'wcdb-room'
        desc = ''
        websiteUrl = 'https://github.com/Tencent/wcdb'
        issueTrackerUrl = 'https://github.com/Tencent/wcdb/issues'
        vcsUrl = 'https://github.com/Tencent/wcdb.git'
        licenses = ['BSD 3-Clause']

        version {
            name = rootProject.VERSION_NAME
            released = new Date()
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name 'BSD 3-Clause License'
            url 'https://opensource.org/licenses/BSD-3-Clause'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id propertyWithDefault('DEVELOPER_ID', '')
            name propertyWithDefault('DEVELOPER_NAME', '')
            email propertyWithDefault('DEVELOPER_EMAIL', '')
        }
    }

    scm {
        url 'https://github.com/Tencent/wcdb'
    }
}

publishing {
    publications {
        wcdbRoomLibrary(MavenPublication) {
            groupId 'com.tencent.wcdb'
            artifactId 'wcdb-room'
            version rootProject.VERSION_NAME

            pom {
                packaging 'aar'

                withXml {
                    def root = asNode()
                    root.appendNode('description', '')
                    root.appendNode('name', 'WCDB Room')
                    root.appendNode('url', 'https://github.com/Tencent/wcdb')
                    root.children().last() + pomConfig

                    def depsNode = root.appendNode('dependencies')
                    [
                            'compile':          'compile',
                            'api':              'compile',
                            'implementation':   'runtime',
                            'compileOnly':      'compile',
                            'runtimeOnly':      'runtime'
                    ].each { conf, scope ->
                        configurations[conf].allDependencies.each { dep ->
                            if (dep.group == null || dep.version == null || dep.name == null
                                    || dep.name == "unspecified")
                                return // ignore invalid dependencies

                            // Determine actual artifactId for the dependency
                            def artifactId = dep.name
                            if (dep instanceof ProjectDependency) {
                                def p = (dep as ProjectDependency).dependencyProject
                                if (p.hasProperty('artifactId'))
                                    artifactId = p.property('artifactId')
                            }

                            def node = depsNode.appendNode('dependency')
                            node.appendNode('groupId', dep.group)
                            node.appendNode('artifactId', artifactId)
                            node.appendNode('version', dep.version)
                            node.appendNode('scope', scope)
                        }
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing.publications.wcdbRoomLibrary {
        artifact(bundleReleaseAar) { classifier = null }
        artifact(bundleReleaseJavadoc)
        artifact(bundleReleaseSources)

        artifact(bundleDebugAar) { classifier = 'debug' }
    }

    tasks.withType(PublishToMavenRepository) { task ->
        task.dependsOn build
    }
    tasks.withType(PublishToMavenLocal) { task ->
        task.dependsOn build
    }

    bintrayUpload {
        for (def pub : bintray.publications) {
            dependsOn "publish${pub.capitalize()}PublicationToMavenLocal"
        }
    }
}
